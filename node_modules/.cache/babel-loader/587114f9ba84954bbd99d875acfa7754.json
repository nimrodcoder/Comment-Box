{"ast":null,"code":"var _jsxFileName = \"/home/kartik/Desktop/Comment-Box/src/Components/CommentForm.jsx\";\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Paper from 'material-ui/Paper';\nimport TextField from 'material-ui/TextField';\nimport Divider from 'material-ui/Divider';\nimport React from 'react';\n\nclass CommentForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      charCount: 0,\n      nameValue: null,\n      bodyValue: null,\n      warningTextForName: '',\n      warningTextForMessage: ''\n    };\n  }\n\n  render() {\n    return React.createElement(Paper, {\n      style: {\n        padding: '15px',\n        backgroundColor: '#ccc'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this._handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \" New Comment \"), React.createElement(TextField, {\n      onChange: this._textEnterName.bind(this),\n      fullWidth: true,\n      floatingLabelText: \"Name\",\n      value: this.state.nameValue,\n      hintText: \"Name\",\n      underlineShow: false,\n      ref: input => this._author = input,\n      errorText: this.state.warningTextForName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      onChange: this._textEnterBody.bind(this),\n      onKeyUp: this._charCounter.bind(this),\n      hintText: \"Comment\",\n      multiLine: true,\n      value: this.state.bodyValue,\n      underlineShow: false,\n      floatingLabelText: \"Message\",\n      ref: textarea => this._body = textarea,\n      errorText: this.state.warningTextForMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(RaisedButton, {\n      onClick: this.addToLocal,\n      type: \"submit\",\n      secondary: true,\n      label: \"Post Comment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.state.charCount, \" characters\")));\n  }\n\n  _textEnterName(event) {\n    event.preventDefault();\n    let author = this._author;\n    this.setState({\n      nameValue: event.target.value\n    });\n\n    if (author.getValue().trim().length > 0) {\n      this.setState({\n        warningTextForName: ''\n      });\n    }\n\n    if (author.getValue().trim().length === 0) {\n      this.setState({\n        warningTextForName: 'This field required!'\n      });\n    }\n  }\n\n  _textEnterBody(event) {\n    event.preventDefault();\n    let body = this._body;\n    this.setState({\n      bodyValue: event.target.value\n    });\n\n    if (body.getValue().trim().length > 0) {\n      this.setState({\n        warningTextForMessage: ''\n      });\n    }\n\n    if (body.getValue().trim().length === 0) {\n      this.setState({\n        warningTextForMessage: 'This field required!'\n      });\n    }\n  }\n\n  _handleSubmit(event) {\n    event.preventDefault();\n    let author = this._author;\n    let body = this._body;\n\n    if (author.getValue().trim().length > 0 && body.getValue().trim().length > 0) {\n      this.props.addComment(author.getValue(), body.getValue());\n      this.setState({\n        nameValue: '',\n        bodyValue: '',\n        charCount: 0\n      });\n    }\n\n    if (!author.getValue().trim().length > 0) {\n      this.setState({\n        warningTextForName: 'This field required!'\n      });\n    }\n\n    if (!body.getValue().trim().length > 0) {\n      this.setState({\n        warningTextForMessage: 'This field required!'\n      });\n    }\n  }\n\n  _charCounter() {\n    this.setState({\n      charCount: this._body.getValue().length\n    });\n  }\n\n} // module.exports = CommentForm;\n// CommentForm.props = {}\n\n\nexport default CommentForm;","map":{"version":3,"sources":["/home/kartik/Desktop/Comment-Box/src/Components/CommentForm.jsx"],"names":["RaisedButton","Paper","TextField","Divider","React","CommentForm","Component","constructor","state","charCount","nameValue","bodyValue","warningTextForName","warningTextForMessage","render","padding","backgroundColor","_handleSubmit","bind","_textEnterName","input","_author","_textEnterBody","_charCounter","textarea","_body","addToLocal","event","preventDefault","author","setState","target","value","getValue","trim","length","body","props","addComment"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,0BAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAEzCC,EAAAA,WAAW,GAAG;AACb;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,CADC;AAEZC,MAAAA,SAAS,EAAE,IAFC;AAGZC,MAAAA,SAAS,EAAE,IAHC;AAIZC,MAAAA,kBAAkB,EAAE,EAJR;AAKZC,MAAAA,qBAAqB,EAAE;AALX,KAAb;AAQA;;AAEDC,EAAAA,MAAM,GAAG;AACR,WACC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAACC,QAAAA,OAAO,EAAC,MAAT;AAAiBC,QAAAA,eAAe,EAAC;AAAjC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAM,MAAA,QAAQ,EAAE,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,EAEC,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAE,KAAKC,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAArB;AAAqD,MAAA,SAAS,EAAE,IAAhE;AACM,MAAA,iBAAiB,EAAC,MADxB;AAEM,MAAA,KAAK,EAAE,KAAKV,KAAL,CAAWE,SAFxB;AAGM,MAAA,QAAQ,EAAC,MAHf;AAIM,MAAA,aAAa,EAAE,KAJrB;AAKM,MAAA,GAAG,EAAGU,KAAD,IAAW,KAAKC,OAAL,GAAeD,KALrC;AAMM,MAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWI,kBAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAUC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVD,EAWC,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAE,KAAKU,cAAL,CAAoBJ,IAApB,CAAyB,IAAzB,CAArB;AAAqD,MAAA,OAAO,EAAE,KAAKK,YAAL,CAAkBL,IAAlB,CAAuB,IAAvB,CAA9D;AACM,MAAA,QAAQ,EAAC,SADf;AACyB,MAAA,SAAS,EAAE,IADpC;AAEM,MAAA,KAAK,EAAE,KAAKV,KAAL,CAAWG,SAFxB;AAGM,MAAA,aAAa,EAAE,KAHrB;AAIM,MAAA,iBAAiB,EAAC,SAJxB;AAKM,MAAA,GAAG,EAAGa,QAAD,IAAc,KAAKC,KAAL,GAAaD,QALtC;AAMM,MAAA,SAAS,EAAE,KAAKhB,KAAL,CAAWK,qBAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXD,EAmBC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBD,EAoBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBD,EAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBD,EAsBC,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAE,KAAKa,UAA5B;AAAwC,MAAA,IAAI,EAAC,QAA7C;AAAsD,MAAA,SAAS,EAAE,IAAjE;AAAuE,MAAA,KAAK,EAAC,cAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBD,EAuBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBD,EAwBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBD,EAyBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKlB,KAAL,CAAWC,SAAjB,gBAzBD,CADD,CADD;AA+BA;;AAEDU,EAAAA,cAAc,CAACQ,KAAD,EAAQ;AACrBA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,MAAM,GAAG,KAAKR,OAAlB;AACA,SAAKS,QAAL,CAAc;AACbpB,MAAAA,SAAS,EAAEiB,KAAK,CAACI,MAAN,CAAaC;AADX,KAAd;;AAGA,QAAIH,MAAM,CAACI,QAAP,GAAkBC,IAAlB,GAAyBC,MAAzB,GAAkC,CAAtC,EAAyC;AACxC,WAAKL,QAAL,CAAc;AACblB,QAAAA,kBAAkB,EAAE;AADP,OAAd;AAGA;;AACD,QAAGiB,MAAM,CAACI,QAAP,GAAkBC,IAAlB,GAAyBC,MAAzB,KAAoC,CAAvC,EAAyC;AACxC,WAAKL,QAAL,CAAc;AACblB,QAAAA,kBAAkB,EAAE;AADP,OAAd;AAGA;AACD;;AACDU,EAAAA,cAAc,CAACK,KAAD,EAAQ;AACrBA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIQ,IAAI,GAAG,KAAKX,KAAhB;AACA,SAAKK,QAAL,CAAc;AACbnB,MAAAA,SAAS,EAAEgB,KAAK,CAACI,MAAN,CAAaC;AADX,KAAd;;AAGA,QAAII,IAAI,CAACH,QAAL,GAAgBC,IAAhB,GAAuBC,MAAvB,GAAgC,CAApC,EAAuC;AACtC,WAAKL,QAAL,CAAc;AACbjB,QAAAA,qBAAqB,EAAE;AADV,OAAd;AAGA;;AACD,QAAGuB,IAAI,CAACH,QAAL,GAAgBC,IAAhB,GAAuBC,MAAvB,KAAkC,CAArC,EAAuC;AACtC,WAAKL,QAAL,CAAc;AACbjB,QAAAA,qBAAqB,EAAE;AADV,OAAd;AAGA;AACD;;AACDI,EAAAA,aAAa,CAACU,KAAD,EAAQ;AACpBA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,MAAM,GAAG,KAAKR,OAAlB;AACA,QAAIe,IAAI,GAAG,KAAKX,KAAhB;;AACA,QAAII,MAAM,CAACI,QAAP,GAAkBC,IAAlB,GAAyBC,MAAzB,GAAkC,CAAlC,IAAuCC,IAAI,CAACH,QAAL,GAAgBC,IAAhB,GAAuBC,MAAvB,GAAgC,CAA3E,EAA8E;AAC7E,WAAKE,KAAL,CAAWC,UAAX,CAAsBT,MAAM,CAACI,QAAP,EAAtB,EAAyCG,IAAI,CAACH,QAAL,EAAzC;AACA,WAAKH,QAAL,CAAc;AACbpB,QAAAA,SAAS,EAAC,EADG;AAEbC,QAAAA,SAAS,EAAC,EAFG;AAGbF,QAAAA,SAAS,EAAC;AAHG,OAAd;AAKA;;AACD,QAAG,CAACoB,MAAM,CAACI,QAAP,GAAkBC,IAAlB,GAAyBC,MAA1B,GAAmC,CAAtC,EAAwC;AACvC,WAAKL,QAAL,CAAc;AACdlB,QAAAA,kBAAkB,EAAE;AADN,OAAd;AAGA;;AACD,QAAG,CAACwB,IAAI,CAACH,QAAL,GAAgBC,IAAhB,GAAuBC,MAAxB,GAAiC,CAApC,EAAsC;AACrC,WAAKL,QAAL,CAAc;AACbjB,QAAAA,qBAAqB,EAAE;AADV,OAAd;AAGA;AACD;;AAGDU,EAAAA,YAAY,GAAG;AACd,SAAKO,QAAL,CAAc;AACbrB,MAAAA,SAAS,EAAE,KAAKgB,KAAL,CAAWQ,QAAX,GAAsBE;AADpB,KAAd;AAGA;;AA/GwC,C,CAkH1C;AAEA;;;AAEA,eAAe9B,WAAf","sourcesContent":["import RaisedButton from 'material-ui/RaisedButton';\nimport Paper from 'material-ui/Paper';\nimport TextField from 'material-ui/TextField';\nimport Divider from 'material-ui/Divider';\nimport React from 'react';\n\n\nclass CommentForm extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcharCount: 0,\n\t\t\tnameValue: null,\n\t\t\tbodyValue: null,\n\t\t\twarningTextForName: '',\n\t\t\twarningTextForMessage: ''\n\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Paper style={{padding:'15px', backgroundColor:'#ccc'}}>\n\t\t\t\t<form onSubmit={this._handleSubmit.bind(this)}>\n\t\t\t\t\t<h3> New Comment </h3>\n\t\t\t\t\t<TextField onChange={this._textEnterName.bind(this)} fullWidth={true}\n\t\t\t\t\t\t\t\t\t\t floatingLabelText=\"Name\"\n\t\t\t\t\t\t\t\t\t\t value={this.state.nameValue}\n\t\t\t\t\t\t\t\t\t\t hintText=\"Name\"\n\t\t\t\t\t\t\t\t\t\t underlineShow={false}\n\t\t\t\t\t\t\t\t\t\t ref={(input) => this._author = input}\n\t\t\t\t\t\t\t\t\t\t errorText={this.state.warningTextForName}\n\t\t\t\t\t/>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<TextField onChange={this._textEnterBody.bind(this)} onKeyUp={this._charCounter.bind(this)}\n\t\t\t\t\t\t\t\t\t\t hintText=\"Comment\" multiLine={true}\n\t\t\t\t\t\t\t\t\t\t value={this.state.bodyValue}\n\t\t\t\t\t\t\t\t\t\t underlineShow={false}\n\t\t\t\t\t\t\t\t\t\t floatingLabelText=\"Message\"\n\t\t\t\t\t\t\t\t\t\t ref={(textarea) => this._body = textarea}\n\t\t\t\t\t\t\t\t\t\t errorText={this.state.warningTextForMessage}\n\t\t\t\t\t/>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<RaisedButton onClick={this.addToLocal} type=\"submit\" secondary={true} label=\"Post Comment\"/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>{this.state.charCount} characters</div>\n\t\t\t\t</form>\n\t\t\t</Paper>\n\t\t)\n\t}\n\n\t_textEnterName(event) {\n\t\tevent.preventDefault();\n\t\tlet author = this._author;\n\t\tthis.setState({\n\t\t\tnameValue: event.target.value\n\t\t})\n\t\tif (author.getValue().trim().length > 0) {\n\t\t\tthis.setState({\n\t\t\t\twarningTextForName: ''\n\t\t\t});\n\t\t}\n\t\tif(author.getValue().trim().length === 0){\n\t\t\tthis.setState({\n\t\t\t\twarningTextForName: 'This field required!'\n\t\t\t});\n\t\t}\n\t}\n\t_textEnterBody(event) {\n\t\tevent.preventDefault();\n\t\tlet body = this._body;\n\t\tthis.setState({\n\t\t\tbodyValue: event.target.value\n\t\t})\n\t\tif (body.getValue().trim().length > 0) {\n\t\t\tthis.setState({\n\t\t\t\twarningTextForMessage: ''\n\t\t\t});\n\t\t}\n\t\tif(body.getValue().trim().length === 0){\n\t\t\tthis.setState({\n\t\t\t\twarningTextForMessage: 'This field required!'\n\t\t\t});\n\t\t}\n\t}\n\t_handleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tlet author = this._author;\n\t\tlet body = this._body;\n\t\tif (author.getValue().trim().length > 0 && body.getValue().trim().length > 0) {\n\t\t\tthis.props.addComment(author.getValue(), body.getValue());\n\t\t\tthis.setState({\n\t\t\t\tnameValue:'',\n\t\t\t\tbodyValue:'',\n\t\t\t\tcharCount:0\n\t\t\t});\n\t\t}\n\t\tif(!author.getValue().trim().length > 0){\n\t\t\tthis.setState({\n\t\t\twarningTextForName: 'This field required!'\n\t\t\t});\n\t\t}\n\t\tif(!body.getValue().trim().length > 0){\n\t\t\tthis.setState({\n\t\t\t\twarningTextForMessage: 'This field required!'\n\t\t\t});\n\t\t}\n\t}\n\n\n\t_charCounter() {\n\t\tthis.setState({\n\t\t\tcharCount: this._body.getValue().length\n\t\t})\n\t}\n}\n\n// module.exports = CommentForm;\n\n// CommentForm.props = {}\n\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}