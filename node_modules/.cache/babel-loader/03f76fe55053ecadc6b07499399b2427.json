{"ast":null,"code":"var _jsxFileName = \"/home/kartik/Desktop/Comment-Box/src/Components/CommentList.jsx\";\nimport Comment from './Comment.jsx';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Paper from 'material-ui/Paper';\nimport React from 'react';\nimport { List } from 'material-ui/List';\nimport CommentForm from './CommentForm.jsx';\n\nclass CommentList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showComments: false,\n      comments: []\n    };\n  }\n  /**This function runs before render method,\n   * Fetching data from source for the first time*/\n\n\n  componentWillMount() {}\n  /**This function runs after render method\n   * Polling data from server every 60 seconds */\n\n\n  componentDidMount() {\n    // this._fetchComments();\n    let comments = JSON.parse(localStorage.getItem('comments'));\n    this.setState({\n      comments: comments.comments\n    });\n    this._timer = setInterval(() => this._fetchComments(), 60000);\n  }\n\n  componentWillUnmount() {\n    /**Clearing closed intervals(_timer here) in Single Page Apps will prevent memory leaks */\n    clearInterval(this._timer);\n  }\n\n  _getCommentList() {\n    return this.state.comments.map(comment => {\n      return React.createElement(Comment, {\n        key: comment.id,\n        author: comment.author,\n        body: comment.body,\n        onDelete: this._deleteComment.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    });\n  }\n\n  _getCommentTitle(comments) {\n    if (comments.length === 0) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"No comments yet\");\n    } else if (comments.length === 1) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \" 1 comment\");\n    } else {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, comments.length, \" comments\");\n    }\n  }\n\n  _handleClick() {\n    this.setState({\n      showComments: !this.state.showComments // comments: localStorage.getItem('comments')\n\n    });\n  }\n\n  render() {\n    // console.log(comments.comments);\n    let commentHtml,\n        buttonText = 'Show Comments';\n\n    if (this.state.showComments) {\n      // commentHtml = comments;\n      buttonText = 'Hide Comments';\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        margin: '0 auto',\n        width: '600px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(CommentForm, {\n      addComment: this._addComment.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        padding: '15px',\n        backgroundColor: '#696969'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(RaisedButton, {\n      onClick: this._handleClick.bind(this),\n      label: buttonText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      style: {\n        padding: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this._getCommentTitle(comments)), commentHtml)));\n  }\n  /**-----------------\n   * AJAX CALLS\n   * ----------------*/\n\n\n  _fetchComments() {\n    // $.ajax({\n    // \t//\turl: './api/comments'\n    // \turl: './Data/comments.json',\n    // \ttype: 'GET',\n    // \tdataType: 'json',\n    // \tcache: false,\n    // \tsuccess: (comments)=> {\n    // \t\tthis.setState({comments})\n    // \t},\n    // });\n    // let value = localStorage.getItem('author')\n    // value = JSON.parse(value)\n    // this.setState({[author})\n    // console.log(value)\n    // this.setState({comments})\n    // console.log(localStorage.getItem('comment'))\n    console.log('fetched data!');\n  }\n\n  _deleteComment(comment) {\n    /**\n    $.ajax({\n    \tmethod: 'DELETE',\n    \turl: `./api/comments/${comment.id}`\n    \t}) */\n    console.log('deleted!');\n    /** ... using spread operator to clone existing array */\n\n    const comments = [...this.state.comments];\n    const commentIndex = comments.indexOf(comment);\n    comments.splice(commentIndex, 1);\n    this.setState({\n      comments\n    });\n  }\n\n  _addComment(author, body) {\n    /**\n     const comment = { author, body}\n     $.post('api/comments', {comment})\n      .success(newComment => {\n    \t\tthis.setState({comments: this.state.comments.concat([comment]});\n      });\n     */\n    const comment = {\n      id: this.state.comments.length + 1,\n      author,\n      body\n    };\n    this.setState({\n      comments: this.state.comments.concat([comment])\n    }); // localStorage.setItem('comment',JSON.stringify(this.state.comments));\n\n    console.log('added!');\n  }\n\n} // module.exports = CommentList;\n\n\nexport default CommentList;","map":{"version":3,"sources":["/home/kartik/Desktop/Comment-Box/src/Components/CommentList.jsx"],"names":["Comment","RaisedButton","Paper","React","List","CommentForm","CommentList","Component","constructor","state","showComments","comments","componentWillMount","componentDidMount","JSON","parse","localStorage","getItem","setState","_timer","setInterval","_fetchComments","componentWillUnmount","clearInterval","_getCommentList","map","comment","id","author","body","_deleteComment","bind","_getCommentTitle","length","_handleClick","render","commentHtml","buttonText","margin","width","_addComment","padding","backgroundColor","console","log","commentIndex","indexOf","splice","concat"],"mappings":"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","sourcesContent":["import Comment from './Comment.jsx';\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Paper from 'material-ui/Paper'\nimport React from 'react';\nimport {List} from 'material-ui/List';\nimport CommentForm from './CommentForm.jsx'\n\n\nclass CommentList extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tshowComments: false,\n\t\t\tcomments: []\n\t\t};\n\t}\n\n\n\t/**This function runs before render method,\n\t * Fetching data from source for the first time*/\n\tcomponentWillMount() {\n\t}\n\n\t/**This function runs after render method\n\t * Polling data from server every 60 seconds */\n\n\tcomponentDidMount() {\n\t\t// this._fetchComments();\n\t\tlet comments = JSON.parse(localStorage.getItem('comments'));\n\t\tthis.setState({comments: comments.comments})\n\t\tthis._timer = setInterval(() => this._fetchComments(), 60000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\t/**Clearing closed intervals(_timer here) in Single Page Apps will prevent memory leaks */\n\t\tclearInterval(this._timer);\n\n\t}\n\n\t_getCommentList() {\n\t\treturn this.state.comments.map((comment) => {\n\t\t\treturn (<Comment key={comment.id}\n\t\t\t\t\t\t\t\t\t\t\t author={comment.author}\n\t\t\t\t\t\t\t\t\t\t\t body={comment.body}\n\t\t\t\t\t\t\t\t\t\t\t onDelete={this._deleteComment.bind(this)}\n\t\t\t\t/>\n\t\t\t)\n\t\t});\n\t}\n\n\t_getCommentTitle(comments) {\n\t\tif (comments.length === 0) {\n\t\t\treturn (<span>No comments yet</span>);\n\t\t}\n\t\telse if (comments.length === 1) {\n\t\t\treturn (<span> 1 comment</span>);\n\t\t}\n\t\telse {\n\t\t\treturn (<span>{comments.length} comments</span>);\n\t\t}\n\t}\n\n\t_handleClick() {\n\t\tthis.setState({\n\t\t\tshowComments: !this.state.showComments,\n\t\t\t// comments: localStorage.getItem('comments')\n\t\t});\n\t}\n\n\n\n\trender() {\n\n\t\t\n\t\t// console.log(comments.comments);\n\t\tlet commentHtml, buttonText = 'Show Comments';\n\n\t\tif (this.state.showComments) {\n\t\t\t// commentHtml = comments;\n\t\t\tbuttonText = 'Hide Comments'\n\t\t}\n\n\t\treturn (\n\t\t\t<div style={{margin:'0 auto', width:'600px'}}>\n\t\t\t\t<List>\n\t\t\t\t\t<CommentForm addComment={this._addComment.bind(this)}/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t\t<div style={{padding:'15px', backgroundColor:'#696969'}}>\n\t\t\t\t\t\t\t<RaisedButton onClick={this._handleClick.bind(this)} label={buttonText}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t<Paper>\n\t\t\t\t\t\t<h2 style={{padding:'15px'}}>{this._getCommentTitle(comments)}</h2>\n\t\t\t\t\t{\n\t\t\t\t\t\tcommentHtml\n\t\t\t\t\t}\n\t\t\t\t\t\t</Paper>\n\t\t\t\t</List>\n\t\t\t</div>\n\t\t)\n\t}\n\n\n\t/**-----------------\n\t * AJAX CALLS\n\t * ----------------*/\n\n\t_fetchComments() {\n\t\t// $.ajax({\n\t\t// \t//\turl: './api/comments'\n\t\t// \turl: './Data/comments.json',\n\t\t// \ttype: 'GET',\n\t\t// \tdataType: 'json',\n\t\t// \tcache: false,\n\t\t// \tsuccess: (comments)=> {\n\t\t// \t\tthis.setState({comments})\n\t\t// \t},\n\t\t// });\n\n\t\t// let value = localStorage.getItem('author')\n\t\t// value = JSON.parse(value)\n\t\t// this.setState({[author})\n\t\t// console.log(value)\n\t\t// this.setState({comments})\n\t\t// console.log(localStorage.getItem('comment'))\n\t\tconsole.log('fetched data!');\n\t}\n\t_deleteComment(comment) {\n\t\t/**\n\t\t$.ajax({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `./api/comments/${comment.id}`\n\n\t\t}) */\n\t\tconsole.log('deleted!');\n\t\t/** ... using spread operator to clone existing array */\n\t\tconst comments = [...this.state.comments];\n\t\tconst commentIndex = comments.indexOf(comment);\n\t\tcomments.splice(commentIndex, 1);\n\t\tthis.setState({comments});\n\t}\n\t_addComment(author, body) {\n\n\t\t/**\n\t\t const comment = { author, body}\n\t\t $.post('api/comments', {comment})\n\t\t  .success(newComment => {\n\t\t\t\tthis.setState({comments: this.state.comments.concat([comment]});\n\t\t  });\n\t\t */\n\t\tconst comment = {\n\t\t\tid: this.state.comments.length + 1,\n\t\t\tauthor,\n\t\t\tbody\n\t\t};\n\n\t\tthis.setState({comments: this.state.comments.concat([comment])});\n\t\t// localStorage.setItem('comment',JSON.stringify(this.state.comments));\n\t\tconsole.log('added!')\n\t}\n\n\n}\n// module.exports = CommentList;\n\nexport default CommentList;"]},"metadata":{},"sourceType":"module"}